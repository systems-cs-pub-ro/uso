===== Înainte de laborator =====

==== Comenzi și fișiere folosite în laborator ====

^ Comandă/fișier ^ Rol ^
| ''ip'' | vizualizarea și configurarea parametrilor interfețelor de rețea |
| ''ip a s'' | vizualizarea parametrilor interfețelor de rețea |
| ''ping'' | verificarea conectivității până la o altă stație |
| ''dhclient'' | configurarea automată a unei interfețe folosind DHCP |
| ''host'' | interogarea serviciului DNS, aflarea adresei IP pentru un nume din Internet |
| ''/etc/resolv.conf'' | fișierul unde se configurează serverul DNS |
| ''traceroute'' | vizualizarea căii în Internet până la o altă stație |
| ''ip r s'' | vizualizarea tabelei de rutare (și a //default gateway//-ului) |
| ''netstat'' | vizualizarea serviciilor de rețea locale |
| ''ssh'' | conexiune la distanță prin SSH |
| ''scp'' | transfer la distanță |
| ''ssh-keygen'' | generarea unei perechi de chei (privată și publică) pentru SSH |
| ''ssh-copy-id'' | copierea unei chei publice SSH la distanță pentru autentificare |
| ''~/.ssh/id_rsa'' | în mod uzual, cheia privată SSH (de tip RSA) |
| ''~/.ssh/id_rsa.pub'' | în mod uzual, cheia publică SSH (de tip RSA) |
| ''~/.ssh/authorized_keys'' | cheile publice pentru care se permite autentificarea de la distanță prin SSH |
| ''~/.ssh/config'' | configurarea clientul SSH pentru utilizatorul curent |
| ''wget'', ''curl'' | accces web la distanță și descărcare de fișiere prin HTTP |

==== Mașini virtuale ====

Pe parcursul laboratorului curent vom folosi două mașini virtuale VirtualBox care pot comunica între ele, numite ''tom'' și ''jerry''. Dacă **nu** aveți un sistem Linux pe care rulați VirtualBox, adică dacă rulați pe Windows sau macOS, aveți nevoie și de mașina virtuală ''uso''.

Mașinile virtual ''tom'' si ''jerry'' sunt parte din fișierul ''USO_tom_jerry.ova'' pe care îl puteți descărca de la http://titan.cs.pub.ro/~razvan/uso/. Pentru a putea folosi mașinile virtuale va trebui să importați fișierul ''USO_tom_jerry.ova'' în VirtualBox. Pentru aceasta, în fereastra VirtualBox, accesați meniurile și opțiunile ''%%File -> Import Appliace%%'' și apoi alegeți calea către fișierul ''USO_tom_jerry.ova''. După ce ați declansat operația de importare, va dura câteva minute să fie importate mașinile virtuale. După ce ați importat mașinile virtuale, veți vedea în fereastra principală VirtualBox intrările ''USO_tom'' și ''USO_jerry''. Porniți ambele mașini virtuale dând click pe intrări și apoi folosind butonul ''Start''.

După aceasta veți avea două ferestre VirtualBox, câte una pentru fiecare mașină virtuală. Mașinile virtuale ''tom'' și ''jerry'' au doar interfața în linia de comandă, **nu** au interfață grafică. Le veți identifica după prompt-ul de autentificare afișat, respectiv ''tom login:'' și ''jerry login:''. Vă puteți autentifica la mașinile virtuale folosind numele de utilizator ''student'' iar apoi parola ''student''.

<note tip>
Pe ambele mașini virtuale, contul de utilizator ''student'' are permisiuni de ''sudo''. Dacă doriți accesarea contului de utilizator ''root'' folosiți comanda
<code>
sudo su
</code>
iar la prompul de parolă scrieți parola utilizatorului ''student'', adică ''student''.
</note>

==== Resurse Git ====

Resursele laboratorulului de USO se găsesc în [[https://github.com/systems-cs-pub-ro/uso|acest repository Git]].

În laboratorul curent, pe mașina virtuală furnizată, aveți deja clonat repository-ul Git în directorul ''~/uso.git/''. Pe parcursul laboratorului vom folosi fișierele de suport de acolo.

<note important>
Pentru a pregăti infrastructura de laborator rulați comenzile de mai jos într-un terminal deschis în mașina virtuală. Deschideți un terminal folosind combinația de taste ''Ctrl+Alt+t''.

În listarea de mai jos ''student@uso:~$'' este promptul unde introduceți comenzile, pe acela nu-l tastați. Recomandăm să **nu** folosiți //copy-paste// ca să vă acomodați cu linia de comandă. Nu vă bateți capul cu ce fac comenzile de mai jos, pe moment le rulăm mecanic, doar să ne facem treaba. Cei curioși pot consulta documentația Git.
<code>
student@uso:~$ cd uso.git/
student@uso:~/uso.git$ git rm --cached -r .
student@uso:~/uso.git$ git reset --hard
student@uso:~/uso.git$ git clean -f -d
student@uso:~/uso.git$ git fetch origin
student@uso:~/uso.git$ git checkout -b lab-08-net
student@uso:~/uso.git$ git rebase origin/lab-08-net
</code>

Dacă la a cincea comandă rulată (''git checkout -b lab-08-net'') primiți o eroare de forma ''fatal: A branch named 'lab-08-net' already exists.'', nu vă îngrijorați, nu e nici o problemă.
</note>

Hai să trecem la treburi de rețelistică!
